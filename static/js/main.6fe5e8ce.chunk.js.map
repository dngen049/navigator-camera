{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","dis","setDis","className","type","accept","onClick","console","log","constraint","video","width","height","audio","navigator","permissions","query","name","then","result","state","alert","getUserMedia","e","document","getElementById","mediaDevices","stream","srcObject","catch","id","autoPlay","canvas","getContext","drawImage","getTracks","forEach","track","stop","disabled","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,wGC+F5BC,G,YA3FH,WAAO,IAAD,EACMC,oBAAS,GADf,mBACTC,EADS,KACJC,EADI,KAiEhB,OACE,yBAAKC,UAAU,OAAf,uBAEE,6BACA,2BAAOC,KAAK,OAAOC,OAAO,YAC1B,6BACA,4BAAQC,QArEY,WACtBC,QAAQC,IAAI,WACZ,IAAMC,EAAa,CACjBC,MAAO,CAAEC,MAAO,KAAMC,OAAQ,KAC9BC,OAAO,GAEHC,UAAUC,YACdD,UAAUC,YAAYC,MAAM,CAAEC,KAAM,WAAYC,MAAK,SAACC,GAC/B,YAAjBA,EAAOC,OACTC,MAAM,sBAEa,WAAjBF,EAAOC,QACHN,UAAUQ,aACdR,UAAUQ,aACRb,GACA,WACEY,MAAM,cAER,SAACE,GACCF,MAAM,QAASE,MAInBF,MAAM,+CAGW,WAAjBF,EAAOC,OACTC,MAAM,yBAIVA,MAAM,yDAsCN,oCAGA,6BACA,4BAAQf,QAvCM,WAChB,IAIMI,EAAQc,SAASC,eAAe,SAEhCX,UAAUQ,aACdR,UAAUY,aACPJ,aARc,CACjBZ,OAAO,EACPG,OAAO,IAOJK,MAAK,SAACS,GACLjB,EAAMkB,UAAYD,EAClBzB,GAAO,MAER2B,OAAM,SAACN,GACNF,MAAM,QAASE,MAGnBF,MAAM,gDAqBN,qBACA,2BAAOS,GAAG,QAAQC,UAAQ,EAACpB,MAAM,MAAMC,OAAO,OAA9C,mBAGA,2BACEN,QAvBU,WACd,IAAM0B,EAASR,SAASC,eAAe,KACjCf,EAAQc,SAASC,eAAe,SACtCO,EAAOC,WAAW,MAAMC,UAAUxB,EAAO,EAAG,EAAG,IAAK,KACpDA,EAAMkB,UAAUO,YAAYC,SAAQ,SAACC,GAAD,OAAWA,EAAMC,UACrD5B,EAAMkB,UAAY,KAClB1B,GAAO,IAkBH4B,GAAG,IACH1B,KAAK,SACLmC,SAAUtC,EACVuC,MAAM,iBAER,4BAAQV,GAAG,IAAInB,MAAM,MAAMC,OAAO,WC9EpB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDyHpB,kBAAmBX,WACrBA,UAAUmC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.6fe5e8ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [dis, setDis] = useState(true);\n  const checkPermission = () => {\n    console.log(\"clicked\");\n    const constraint = {\n      video: { width: 1280, height: 720 },\n      audio: false,\n    };\n    if (!!navigator.permissions) {\n      navigator.permissions.query({ name: \"camera\" }).then((result) => {\n        if (result.state === \"granted\") {\n          alert(\"Permission granted\");\n        }\n        if (result.state === \"prompt\") {\n          if (!!navigator.getUserMedia) {\n            navigator.getUserMedia(\n              constraint,\n              () => {\n                alert(\"Success\");\n              },\n              (e) => {\n                alert(\"error\", e);\n              }\n            );\n          } else {\n            alert(\"getUserMedia not supported in this browser\");\n          }\n        }\n        if (result.state === \"denied\") {\n          alert(\"Permissions denied\");\n        }\n      });\n    } else {\n      alert(\"navigator.permissions not supported in this browser\");\n    }\n  };\n  const getCamera = () => {\n    const constraint = {\n      video: true,\n      audio: false,\n    };\n    const video = document.getElementById(\"video\");\n\n    if (!!navigator.getUserMedia) {\n      navigator.mediaDevices\n        .getUserMedia(constraint)\n        .then((stream) => {\n          video.srcObject = stream;\n          setDis(false);\n        })\n        .catch((e) => {\n          alert(\"error\", e);\n        });\n    } else {\n      alert(\"getUserMedia not supported in this browser\");\n    }\n  };\n  const takePic = () => {\n    const canvas = document.getElementById(\"c\");\n    const video = document.getElementById(\"video\");\n    canvas.getContext(\"2d\").drawImage(video, 0, 0, 300, 300);\n    video.srcObject.getTracks().forEach((track) => track.stop());\n    video.srcObject = null;\n    setDis(true);\n  };\n  return (\n    <div className=\"App\">\n      Welcome to my deploy\n      <br />\n      <input type=\"file\" accept=\"image/*\"></input>\n      <br />\n      <button onClick={checkPermission}>\n        Check if permission is supported\n      </button>\n      <br />\n      <button onClick={getCamera}>Get camera access</button>\n      <video id=\"video\" autoPlay width=\"300\" height=\"300\">\n        video stream NA\n      </video>\n      <input\n        onClick={takePic}\n        id=\"b\"\n        type=\"button\"\n        disabled={dis}\n        value=\"Take picture\"\n      ></input>\n      <canvas id=\"c\" width=\"300\" height=\"300\"></canvas>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}